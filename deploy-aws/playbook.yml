---

#
# Provision stuff on AWS
#

- name: "ensure security group exists"
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
  - global_vars.yml
  tags:
  - provision
  tasks:
  - ec2_group:
      name: csg-kubernetes-cluster
      description: "security group used by all machines in kubernetes cluster"
      region: "{{ aws_region }}"
      state: present
      rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        from_port: 8 # icmp type, -1 = any type
        to_port:  -1 # icmp subtype, -1 = any subtype
        cidr_ip: 0.0.0.0/0


- hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
  - global_vars.yml
  tags:
  - provision
  tasks:
  - ec2:
      region: "{{ aws_region }}"
      instance_type: t2.micro
      instance_tags:
        Name: kubernetes-master
      count_tag:
        Name: kubernetes-master
      exact_count: 1
      image: "{{ per_region[aws_region]['ami'] }}"
      key_name: kubernetes-cluster
      groups:
      - default
      - csg-kubernetes-cluster
  - ec2:
      region: "{{ aws_region }}"
      instance_type: t2.nano
      instance_tags:
        Name: kubernetes-slave
      count_tag:
        Name: kubernetes-slave
      exact_count: 2
      image: "{{ per_region[aws_region]['ami'] }}"
      key_name: kubernetes-cluster
      groups:
      - default
      - csg-kubernetes-cluster

#
# Deployment
#

- hosts: tag_Name_kubernetes_master:tag_Name_kubernetes_slave
  gather_facts: false
  become: true
  become_method: sudo
  vars_files:
  - global_vars.yml
  tags:
  - deploy
  tasks:
  - name: "install python 2"
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
  - name: "generate id for each node"
    set_fact:
      nid: "{{ 255 |random(start=1,seed=inventory_hostname) }}"
  - name: "set local ip for OVN"
    set_fact:
      subnet_ip: "10.0.{{ nid }}.0/16"
      local_ip: "10.0.{{ nid }}.254"
  - debug:
      msg: "Local IP = {{ local_ip }}"

- hosts: tag_Name_kubernetes_master
  become: true
  become_method: sudo
  vars_files:
  - global_vars.yml
  vars:
    central_ip: "{{ ec2_private_ip_address }}"
  tags:
  - deploy
  tasks:
  # install docker
  - name: "install docker"
    include_role:
      name: angstwad.docker_ubuntu

  # install and configure networking
  # http://docs.openvswitch.org/en/latest/intro/install/distributions/#debian
  - name: "install openvswitch-switch"
    apt:
      name: openvswitch-switch
      state: present
  - name: "install ovn-common"
    apt:
      name: ovn-common
      state: present
  - name: "install ovn-central"
    apt:
      name: ovn-central
      state: present
  # https://github.com/openvswitch/ovn-kubernetes#system-initialization
  # northd seems to be already up after package installation, but better safe than sorry
  - name: "start northd"
    shell: "/usr/share/openvswitch/scripts/ovn-ctl start_northd"
  - name: "add some entries to db"
    shell: >
      ovs-vsctl set Open_vSwitch . external_ids:ovn-remote="tcp:{{ central_ip }}:6642"
      external_ids:ovn-nb="tcp:{{ central_ip }}:6641"
      external_ids:ovn-encap-ip={{ local_ip }}
      external_ids:ovn-encap-type=geneve
  - name: "start OVN controller"
    shell: /usr/share/openvswitch/scripts/ovn-ctl start_controller
  - name: "Set the k8s API server address in the OVS database"
    shell: ovs-vsctl set Open_vSwitch . external_ids:k8s-api-server="localhost:8080"
  - name: "clone ovn-kubernetes repository"
    git:
      repo: "https://github.com/openvswitch/ovn-kubernetes"
      dest: "ovn-k"
      force: true
  - name: "install requirements for ovn-kubernetes"
    shell: pip install .
    args:
      chdir: "ovn-k"
  - name: "initialize ovn master"
    shell: >
      ovn-k8s-overlay master-init
      --cluster-ip-subnet="10.0.0.0/16"
      --master-switch-subnet="{{ subnet_ip }}"
      --node-name="{{ ansible_hostname }}"
    args:
      chdir: "ovn-k"
  - name: "start watchers"
    shell: >
      ovn-k8s-watcher --overlay --pidfile --log-file -vfile:info -vconsole:emer --detach
    args:
      chdir: "ovn-k"

  # install kubernetes
  - name: "check if kubernetes package has already been downloaded"
    tags:
    - k8s-download
    stat:
      path: kubernetes/
    register: kube_stats
  - name: "download kubernetes packages"
    tags:
    - k8s-download
    shell: >
      rm -f kubernetes.tar.gz &&
      rm -rf kubernetes/ &&
      wget "https://github.com/kubernetes/kubernetes/releases/download/v1.6.6/kubernetes.tar.gz" &&
      tar -xvzf kubernetes.tar.gz &&
      cd kubernetes/cluster &&
      KUBERNETES_SKIP_CONFIRM=True ./get-kube-binaries.sh &&
      cd - &&
      tar -xvzf kubernetes/server/kubernetes-server-linux-amd64.tar.gz &&
      :
    when: kube_stats.stat.exists == False
  # client binaries: kubernetes/client/bin
  # server binaries: kubernetes/server/bin
  # https://github.com/openvswitch/ovn-kubernetes/blob/master/docs/INSTALL.K8S.md
  - name: "create etcd container"
    tags:
    - k8s-install-master
    shell: >
      docker run
      --net=host
      --detach
      gcr.io/google_containers/etcd:2.0.12
      /usr/local/bin/etcd
      --addr=127.0.0.1:4001
      --bind-addr=0.0.0.0:4001
      --data-dir=/var/etcd/data

  - name: "run kube-apiserver"
    tags:
    - k8s-install-master
    shell: >
      start-stop-daemon
      --start
      --quiet
      --make-pidfile
      --pidfile /home/ubuntu/pid-apiserver
      --background
      --oknodo
      --startas /bin/bash
      --
      -c "exec /home/ubuntu/kubernetes/server/bin/kube-apiserver
      --service-cluster-ip-range=10.0.0.0/16
      --address=0.0.0.0
      --etcd-servers=http://127.0.0.1:4001
      --storage-backend=etcd2
      --v=2 > /home/ubuntu/apiserver.log 2>&1"
    args:
      chdir: "kubernetes/server/bin"

  - name: "run kube-controller-manager"
    async: 45
    poll: 0
    tags:
    - k8s-install-master
    shell: >
      start-stop-daemon
      --start
      --quiet
      --make-pidfile
      --pidfile /home/ubuntu/pid-controlman
      --background
      --oknodo
      --startas /bin/bash
      --
      -c "exec /home/ubuntu/kubernetes/server/bin/kube-controller-manager
      --master=127.0.0.1:8080
      --v=2 > /home/ubuntu/controlman.log 2>&1"
    args:
      chdir: "kubernetes/server/bin"

  - name: "run kube-scheduler"
    async: 45
    poll: 0
    tags:
    - k8s-install-master
    shell: >
      start-stop-daemon
      --start
      --quiet
      --make-pidfile
      --pidfile /home/ubuntu/pid-sched
      --background
      --oknodo
      --startas /bin/bash
      --
      -c "exec /home/ubuntu/kubernetes/server/bin/kube-scheduler
      --master=127.0.0.1:8080
      --v=2 > /home/ubuntu/sched.log 2>&1"
    args:
      chdir: "kubernetes/server/bin"




- hosts: tag_Name_kubernetes_slave
  become: true
  become_method: sudo
  vars_files:
  - global_vars.yml
  tags:
  - deploy
  tasks:
  # first set some variables
  # http://docs.openvswitch.org/en/latest/intro/install/distributions/#debian
  - tags:
    - k8s-install-slave
    set_fact:
      central_conn_ip: "{{ groups['tag_Name_kubernetes_master'][0] }}"
  - tags:
    - k8s-install-slave
    set_fact:
      central_ip: "{{ hostvars[central_conn_ip]['ec2_private_ip_address'] }}"
  - tags:
    - k8s-install-slave
    debug:
      msg: "Central IP: {{ central_ip }}"

  # install docker
  - name: "install docker"
    include_role:
      name: angstwad.docker_ubuntu

  # install and configure networking stuff
  - name: "install openvswitch-switch"
    apt:
      name: openvswitch-switch
      state: present
  - name: "install ovn-common"
    apt:
      name: ovn-common
      state: present
  - name: "install ovn-host"
    apt:
      name: ovn-host
      state: present
  # https://github.com/openvswitch/ovn-kubernetes#system-initialization
  - name: "add some entries to db"
    shell: >
      ovs-vsctl set Open_vSwitch . external_ids:ovn-remote="tcp:{{ central_ip }}:6642"
      external_ids:ovn-nb="tcp:{{ central_ip }}:6641"
      external_ids:ovn-encap-ip={{ local_ip }}
      external_ids:ovn-encap-type=geneve
  - name: "start OVN controller"
    shell: /usr/share/openvswitch/scripts/ovn-ctl start_controller
  - name: "Set the k8s API server address in the OVS database"
    shell: >
      ovs-vsctl set Open_vSwitch . external_ids:k8s-api-server={{ central_ip }}:8080
  - name: "clone ovn-kubernetes repository"
    git:
      repo: "https://github.com/openvswitch/ovn-kubernetes"
      dest: "ovn-k"
      force: true
  - name: "install requirements for ovn-kubernetes"
    shell: pip install .
    args:
      chdir: "ovn-k"
  - name: "initialize ovn minion"
    shell: >
      ovn-k8s-overlay minion-init
      --cluster-ip-subnet="10.0.0.0/16"
      --minion-switch-subnet="{{ subnet_ip }}"
      --node-name={{ ansible_hostname }}
    args:
      chdir: "ovn-k"
  - name: ""
    shell: >
      ovn-k8s-util nics-to-bridge eth0 &&
      dhclient breth0
    args:
      chdir: "ovn-k"
  - name: "configure gateway"
    shell: >
      ovn-k8s-overlay gateway-init
      --cluster-ip-subnet="10.0.0.0/16"
      --bridge-interface breth0
      --physical-ip {{ ec2_private_ip_address }}
      --node-name={{ ansible_hostname }}
      --default-gw "172.31.64.1"
    args:
      chdir: "ovn-k"
  - name: "demux gateway traffic"
    shell: >
      ovn-k8s-gateway-helper --physical-bridge=breth0 --physical-interface=eth0 --pidfile --detach
    args:
      chdir: "ovn-k"

  # install kubernetes
  - name: "check if kubernetes package has already been downloaded"
    tags:
    - k8s-download
    stat:
      path: kubernetes/
    register: kube_stats
  - name: "download kubernetes packages"
    tags:
    - k8s-download
    shell: >
      rm -f kubernetes.tar.gz &&
      rm -rf kubernetes/ &&
      wget "https://github.com/kubernetes/kubernetes/releases/download/v1.6.6/kubernetes.tar.gz" &&
      tar -xvzf kubernetes.tar.gz &&
      cd kubernetes/cluster &&
      KUBERNETES_SKIP_CONFIRM=True ./get-kube-binaries.sh &&
      cd - &&
      tar -xvzf kubernetes/server/kubernetes-server-linux-amd64.tar.gz &&
      :
    when: kube_stats.stat.exists == False
  # client binaries: kubernetes/client/bin
  # server binaries: kubernetes/server/bin
  - name: "download cni plugin"
    tags:
    - k8s-install-slave
    shell: >
      mkdir -p /opt/cni/bin && cd /opt/cni/bin &&
      wget https://github.com/containernetworking/cni/releases/download/v0.2.0/cni-v0.2.0.tgz &&
      tar xfz cni-v0.2.0.tgz &&
      :
  - name: "start kublet"
    tags:
    - k8s-install-slave
    shell: >
      start-stop-daemon
      --start
      --quiet
      --make-pidfile
      --pidfile /home/ubuntu/pid-kublet
      --background
      --oknodo
      --startas /bin/bash
      --
      -c "exec /home/ubuntu/kubernetes/server/bin/kubelet
      --api-servers=http://{{ central_ip }}:8080
      --v=2
      --address=0.0.0.0
      --enable-server=true
      --network-plugin=cni
      --cni-conf-dir=/etc/cni/net.d
      --cni-bin-dir=/opt/cni/bin > /home/ubuntu/kublet.log 2>&1"




# todo
# always show ouptut
# starting daemons should have correct modified status
# higher version of CNI plugin?
# replace > with |, add \
# divide using tags
# set local ips as tags
# fix problem with watcher startup

